{"version":3,"file":"hyperapp-lazy-components.umd.js","sources":["../src/index.js"],"sourcesContent":["/**\n * @name CACHED_VIEWS\n * @description The views that was load before\n */\nconst CACHED_VIEWS = {}\n\n/**\n * @name createLazy\n * @description The container that will create the lazy modules\n * @param {Function} app The hyperapp app function\n * @param {Element} container The Element that your app will be mounted\n * \n * @example\n * const modules = {\n *  home: {\n *     view: import('./myModule'),\n *     actions: import('./myModule/actions.js'),\n *     state: import('./myModule/state.js')\n *   }\n * }\n * const { actions, state } = createLazy(app, container)(modules, fetching => <Loading fetching={fetching}/>)\n * \n * @returns {Function}\n * @param {Object} modules \n */\nexport function createLazy(app, container) {\n  return (modules, isFetching) => {\n    createLazy.modules = modules\n    createLazy.isFetching = isFetching\n    createLazy.app = app\n    createLazy.container = container\n    \n    /**\n     * @description Pass these props to your app function\n     * @returns {Object} \n     * \n     * @example\n     * const { actions, state } = createLazy(app, container)(modules, fetching => <Loading fetching={fetching}/>)\n     * \n     * const appState = {\n     *   ...state,\n     *   ...lazyState\n     * }\n     * \n     * const appActions = {\n     *   ...actions,\n     *   ...appActions  \n     * }\n     * \n     * const main = app(appState, appActions, view, document.body)\n     */\n    return {\n      actions: {\n        fetching: (fetching) => () => ({ fetching }),\n        lazy: {\n          fetching: () => () => ({ lazy: { fetching: true, props: undefined } }), \n          loaded: (view) => () => ({ lazy: { view, fetching: false, props: undefined } })\n        }\n      },\n      state: {\n      fetching: false,\n        lazy: {\n          view: null,\n          fetching: true,\n          props: undefined\n        }\n      }\n    }\n  }\n}\n\n/**\n * @name assign\n * @description Object.assign\n */\nconst assign = Object.assign\n\n/**\n * @name getModule\n * @description Get the module \n */\nconst getModule = module => module.default ? module.default : module\n\n/**\n * @name render\n * @description Render the component providing the props or not.\n * If props are provided, it will be available as state.lazyProps\n *\n *  @param {Object} The data to mount the lazy component on\n * the page.\n *  \n */\nconst render = ({ view, state, actions, props }) => {\n  const container = createLazy.container\n  const appstate = assign(state, { lazy: { props, fetching: false } })\n  createLazy.app(appstate, actions, view, container)\n  state.fetching && actions.fetching(false)\n}\n\nconst renderComponent = (data) => {\n  const parentState = data.state\n  const parentActions = data.actions\n    const cacheModule = CACHED_VIEWS[data.module]\n    \n    return render({\n      view: cacheModule.view,\n      actions: assign({}, parentActions, cacheModule.actions),\n      state: assign({}, parentState, cacheModule.state),\n      props: data.props\n    })\n}\n\n\n/**\n * @description Fully load the lazy component with their state and actions.\n * \n * @param {Object} props The props to render the lazy component\n */\nconst loadModule = data => {\n  Promise.all([\n    createLazy.modules[data.module].view,\n    createLazy.modules[data.module].actions,\n    createLazy.modules[data.module].state\n  ]).then(module => {\n    const [view, actions, state] = module\n    const lazyComponent = getModule(view)\n    CACHED_VIEWS[data.module] = {\n      view: lazyComponent,\n      state: getModule(state || {}),\n      actions: getModule(actions),\n    }\n    data.state.fetching && data.actions.lazy.loaded(lazyComponent, false)\n  })\n  \n  !data.state.fetching && data.actions.fetching(true)\n  return data.state.fetching && createLazy.app(true, {}, createLazy.isFetching(true), createLazy.container.children[0])\n}\n\n/**\n * \n * @param {String} component The component name\n * @param {Any} props The lazyProps state \n * \n * @returns {Function}\n */\nexport const Lazy = ({ module, props }) =>\n  (state, actions) => {\n    return CACHED_VIEWS[module] ? renderComponent({ module, state, actions, props }) : loadModule({ module, state, actions, props })\n  }"],"names":["const","CACHED_VIEWS","createLazy","app","container","modules","isFetching","actions","fetching","lazy","props","undefined","loaded","view","state","assign","Object","getModule","module","default","renderComponent","data","ref","appstate","parentState","cacheModule","Promise","all","then","lazyComponent","children"],"mappings":"4LAIAA,IAAMC,KAqBC,SAASC,EAAWC,EAAKC,GAC9B,gBAAQC,EAASC,GAyBf,OAxBAJ,EAAWG,QAAUA,EACrBH,EAAWI,WAAaA,EACxBJ,EAAWC,IAAMA,EACjBD,EAAWE,UAAYA,GAsBrBG,SACEC,kBAAWA,qCAAsBA,KACjCC,MACED,6CAAyBC,MAAQD,UAAU,EAAME,WAAOC,MACxDC,gBAASC,4BAAkBJ,WAAQI,EAAML,UAAU,EAAOE,WAAOC,QAGrEG,OACAN,UAAU,EACRC,MACEI,KAAM,KACNL,UAAU,EACVE,WAAOC,MAWjBX,IAAMe,EAASC,OAAOD,OAMhBE,WAAYC,UAAUA,EAAOC,QAAUD,EAAOC,QAAUD,GAkBxDE,WAAmBC,GACvBrB,IARcsB,QACRlB,EACAmB,EAMAC,EAAcH,EAAKP,MAEjBW,EAAcxB,EAAaoB,EAAKH,QAEtC,OAZYI,GAaVT,KAAMY,EAAYZ,KAClBN,QAASQ,KALSM,EAAKd,QAKYkB,EAAYlB,SAC/CO,MAAOC,KAAWS,EAAaC,EAAYX,OAC3CJ,MAAOW,EAAKX,4BAfVN,EAAYF,EAAWE,UACvBmB,EAAWR,aAAgBN,oBAAeD,UAAU,KAC1DN,EAAWC,IAAIoB,EAAUhB,EAASM,EAAMT,QACxCU,EAAMN,UAAYD,EAAQC,UAAS,oCAiDhBc,4CAClBR,EAAOP,UACCN,EAAaiB,GAAUE,UAAkBF,QAAQJ,UAAOP,QAASG,KA7BzDW,UA6BiFH,QAAQJ,UAAOP,QAASG,GA5B1HgB,QAAQC,KACNzB,EAAWG,QAAQgB,EAAKH,QAAQL,KAChCX,EAAWG,QAAQgB,EAAKH,QAAQX,QAChCL,EAAWG,QAAQgB,EAAKH,QAAQJ,QAC/Bc,cAAKV,GACN,kBACMW,EAAgBZ,QACtBhB,EAAaoB,EAAKH,SAChBL,KAAMgB,EACNf,MAAOG,EAAUH,OACjBP,QAASU,EAAUV,IAErBc,EAAKP,MAAMN,UAAYa,EAAKd,QAAQE,KAAKG,OAAOiB,GAAe,MAGhER,EAAKP,MAAMN,UAAYa,EAAKd,QAAQC,UAAS,GACvCa,EAAKP,MAAMN,UAAYN,EAAWC,KAAI,KAAUD,EAAWI,YAAW,GAAOJ,EAAWE,UAAU0B,SAAS,SAjBjGT"}